type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | CONCAT
  | BOOL
  | NAT
  | STR
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | FST
  | SND
  | DOT
  | EQ
  | COLON
  | ARROW
  | QUOTE
  | EOF
  | INTV of (int)
  | STRINGV of (string)
  | STRING of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 40 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* CONCAT *);
  270 (* BOOL *);
  271 (* NAT *);
  272 (* STR *);
  273 (* LPAREN *);
  274 (* RPAREN *);
  275 (* LBRACE *);
  276 (* RBRACE *);
  277 (* COMMA *);
  278 (* FST *);
  279 (* SND *);
  280 (* DOT *);
  281 (* EQ *);
  282 (* COLON *);
  283 (* ARROW *);
  284 (* QUOTE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  285 (* INTV *);
  286 (* STRINGV *);
  287 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\007\000\006\000\006\000\004\000\004\000\008\000\008\000\
\008\000\008\000\008\000\008\000\009\000\010\000\010\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\003\000\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\001\000\002\000\
\002\000\005\000\003\000\005\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\005\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\020\000\040\000\000\000\000\000\000\000\023\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\024\000\025\000\
\000\000\000\000\000\000\000\000\000\000\008\000\015\000\000\000\
\000\000\021\000\000\000\000\000\022\000\032\000\033\000\034\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\031\000\000\000\000\000\
\036\000\005\000\030\000\004\000\006\000\000\000\028\000\000\000\
\000\000\000\000\037\000\000\000\007\000\039\000"

let yydgoto = "\002\000\
\018\000\019\000\020\000\059\000\021\000\034\000\022\000\060\000\
\061\000\070\000"

let yysindex = "\008\000\
\069\255\000\000\237\254\000\000\000\000\100\255\141\255\141\255\
\141\255\254\254\000\255\100\255\100\255\001\255\000\000\253\254\
\000\000\000\000\036\000\138\255\011\255\000\000\013\255\000\000\
\035\255\011\255\011\255\011\255\019\255\020\255\100\255\243\254\
\024\255\025\255\100\255\000\000\119\255\011\255\000\000\000\000\
\021\255\004\255\100\255\100\255\004\255\000\000\000\000\100\255\
\100\255\000\000\052\000\138\255\000\000\000\000\000\000\000\000\
\004\255\023\255\030\255\028\255\000\000\050\255\045\255\033\255\
\041\255\039\255\000\000\006\255\036\255\044\255\100\255\004\255\
\100\255\100\255\100\255\000\000\001\255\000\000\004\255\004\255\
\000\000\000\000\000\000\000\000\000\000\049\255\000\000\048\255\
\053\255\100\255\000\000\023\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\145\000\
\000\000\000\000\000\000\176\000\001\000\000\000\000\000\000\000\
\000\000\032\000\063\000\094\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\248\254\000\000\000\000\000\000\000\000\
\000\000\055\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\255\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\046\000\225\255\251\255\010\000\000\000\000\000\
\000\000\249\255"

let yytablesize = 471
let yytable = "\025\000\
\009\000\026\000\027\000\028\000\047\000\031\000\032\000\048\000\
\001\000\029\000\023\000\029\000\029\000\064\000\038\000\029\000\
\029\000\054\000\055\000\056\000\057\000\035\000\058\000\078\000\
\046\000\068\000\079\000\029\000\051\000\030\000\033\000\010\000\
\039\000\040\000\041\000\036\000\062\000\063\000\042\000\043\000\
\083\000\065\000\066\000\044\000\050\000\045\000\038\000\088\000\
\089\000\049\000\053\000\067\000\069\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\090\000\080\000\011\000\081\000\
\082\000\091\000\084\000\085\000\086\000\003\000\004\000\005\000\
\006\000\092\000\027\000\007\000\008\000\009\000\010\000\011\000\
\038\000\012\000\052\000\093\000\094\000\013\000\087\000\014\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\015\000\016\000\017\000\003\000\004\000\005\000\006\000\
\000\000\000\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\000\000\000\000\000\000\013\000\000\000\014\000\000\000\
\004\000\005\000\000\000\000\000\013\000\007\000\008\000\009\000\
\015\000\024\000\017\000\000\000\000\000\000\000\000\000\013\000\
\000\000\014\000\000\000\004\000\005\000\000\000\004\000\005\000\
\018\000\000\000\000\000\015\000\024\000\017\000\037\000\000\000\
\000\000\000\000\013\000\000\000\014\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\024\000\
\017\000\015\000\024\000\017\000\000\000\000\000\000\000\003\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\010\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\011\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\012\000\012\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\013\000\
\013\000\013\000\018\000\018\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\018\000\018\000\
\018\000\000\000\000\000\000\000\000\000\018\000\018\000\018\000\
\003\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
\000\000\003\000\014\000\003\000\003\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
\000\000\000\000\000\000\014\000\000\000\014\000\014\000"

let yycheck = "\006\000\
\000\000\007\000\008\000\009\000\018\001\012\000\013\000\021\001\
\001\000\018\001\030\001\020\001\021\001\045\000\020\000\024\001\
\025\001\014\001\015\001\016\001\017\001\025\001\019\001\018\001\
\031\000\057\000\021\001\030\001\035\000\030\001\030\001\000\000\
\022\001\023\001\024\001\000\000\043\000\044\000\026\001\005\001\
\072\000\048\000\049\000\025\001\020\001\026\001\052\000\079\000\
\080\000\026\001\030\001\000\000\030\001\024\001\027\001\006\001\
\012\001\025\001\018\001\021\001\012\001\026\001\000\000\020\001\
\071\000\018\001\073\000\074\000\075\000\001\001\002\001\003\001\
\004\001\021\001\020\001\007\001\008\001\009\001\010\001\011\001\
\020\001\013\001\037\000\090\000\092\000\017\001\077\000\019\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\029\001\030\001\031\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\019\001\255\255\
\002\001\003\001\255\255\255\255\000\000\007\001\008\001\009\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\255\255\002\001\003\001\255\255\002\001\003\001\
\000\000\255\255\255\255\029\001\030\001\031\001\013\001\255\255\
\255\255\255\255\017\001\255\255\019\001\017\001\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\029\001\030\001\031\001\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\001\001\255\255\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\001\001\020\001\021\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\020\001\021\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  CONCAT\000\
  BOOL\000\
  NAT\000\
  STR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  FST\000\
  SND\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  QUOTE\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  STRINGV\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 48 "parser.mly"
        ( Bind (_1, _3) )
# 312 "parser.ml"
               : Lambda.operations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 50 "parser.mly"
        ( Eval _1 )
# 319 "parser.ml"
               : Lambda.operations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 54 "parser.mly"
      ( _1 )
# 326 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 56 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 335 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 58 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 344 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 60 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 353 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 62 "parser.mly"
      ( TmLetIn (_2, TmFix ( TmAbs (_2, _4, _6)), _8) )
# 363 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( TmConcat (_2,_3) )
# 371 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 68 "parser.mly"
      ( _1 )
# 378 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 70 "parser.mly"
      ( TmSucc _2 )
# 385 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( TmPred _2 )
# 392 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( TmIsZero _2 )
# 399 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( TmApp (_1, _2) )
# 407 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( TmConcat (_1,_3) )
# 415 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 82 "parser.mly"
      ( _2 )
# 422 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
      ( TmTrue )
# 428 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
      ( TmFalse )
# 434 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
      ( TmVar _1 )
# 441 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 451 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
      ( 
        TmString (String.sub _1 1 (String.length(_1)-2))
      )
# 460 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTerm) in
    Obj.repr(
# 99 "parser.mly"
      ( TmRecord _2 )
# 467 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
      ( TmProjection (_1, _3) )
# 475 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pairTerm) in
    Obj.repr(
# 103 "parser.mly"
      ( _1 )
# 482 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 105 "parser.mly"
      ( TmFst _1 )
# 489 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 107 "parser.mly"
      ( TmSnd _1 )
# 496 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 111 "parser.mly"
      ( TmPair (_2,_4) )
# 504 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 115 "parser.mly"
      ( [(_1,_3)] )
# 512 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTerm) in
    Obj.repr(
# 117 "parser.mly"
      ( (_1,_3)::_5 )
# 521 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 121 "parser.mly"
      ( _1 )
# 528 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 123 "parser.mly"
      ( TyArr (_1, _3) )
# 536 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 127 "parser.mly"
      ( _2 )
# 543 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
      ( TyBool )
# 549 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
      ( TyNat )
# 555 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
      ( TyString )
# 561 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pairTy) in
    Obj.repr(
# 135 "parser.mly"
      ( _1 )
# 568 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTy) in
    Obj.repr(
# 137 "parser.mly"
      ( TyRecord _2 )
# 575 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 142 "parser.mly"
      ( TyPair(_2,_4))
# 583 "parser.ml"
               : 'pairTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 146 "parser.mly"
      ( [(_1,_3)] )
# 591 "parser.ml"
               : 'recordTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTy) in
    Obj.repr(
# 148 "parser.mly"
      ( (_1,_3)::_5 )
# 600 "parser.ml"
               : 'recordTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.operations)
